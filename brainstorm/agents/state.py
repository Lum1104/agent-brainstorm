from typing import List, Dict, TypedDict, Optional
from langchain_google_genai import ChatGoogleGenerativeAI


class GraphState(TypedDict):
    """
    Represents the state of our graph.

    Attributes:
        api_key: The Google API key.
        llm: The language model instance.
        topic: The central topic for brainstorming.
        brainstorm_type: The type of brainstorm ('project' or 'research_paper').
        pdf_text: Optional text extracted from a user-provided PDF.
        combined_context: The summarized context from web search and PDF.
        personas: A list of generated expert personas.
        all_generated_ideas: A list of all ideas generated by the personas.
        critiques: A list of critiques for the generated ideas.
        filtered_ideas: A list of ideas after user filtering.
        evaluation_markdown: The markdown output from the evaluation stage.
        top_ideas: The top ideas selected by the analyst agent.
        chosen_idea: The final idea selected by the user for planning.
        final_plan_text: The final project plan or research outline.
        use_arxiv_search: A boolean indicating whether to use ArXiv search.
        user_plan_feedback: User's feedback on the generated plan.
        arxiv_context: Context from ArXiv search.
    """

    api_key: str
    llm: ChatGoogleGenerativeAI
    topic: str
    brainstorm_type: str
    pdf_text: Optional[str]
    combined_context: str
    personas: List[Dict]
    all_generated_ideas: List[Dict]
    critiques: List[Dict]
    filtered_ideas: List[Dict]
    evaluation_markdown: str
    top_ideas: List[Dict]
    chosen_idea: Optional[Dict]
    final_plan_text: str
    use_arxiv_search: bool
    user_plan_feedback: Optional[str]
    arxiv_context: str
