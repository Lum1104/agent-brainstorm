# schemas.py
# This file contains the Pydantic models for structured data validation.

from typing import List
from pydantic import BaseModel, Field


class Persona(BaseModel):
    """A single expert persona for brainstorming."""

    Role: str = Field(
        ...,
        description="The professional role of the persona, e.g., 'Product Manager'.",
    )
    Goal: str = Field(
        ...,
        description="The primary objective of this persona in the brainstorming session.",
    )
    Backstory: str = Field(
        ..., description="A brief history of the persona's experience and perspective."
    )


class PersonaList(BaseModel):
    """A list of expert personas."""

    personas: List[Persona]


class ProjectIdea(BaseModel):
    """Represents a single project idea generated by a persona."""

    idea: str = Field(..., description="A concise name for the project/feature.")
    target_audience: str = Field(
        ..., description="The specific user or group who would benefit most."
    )
    problem_solved: str = Field(
        ..., description="The core pain point this idea addresses."
    )
    rationale: str = Field(
        ..., description="A single sentence on why the unique persona suggests this."
    )


class ProjectIdeasList(BaseModel):
    """A list of project ideas."""

    project_ideas: List[ProjectIdea]


class ResearchIdea(BaseModel):
    """Represents a single research idea generated by a persona."""

    research_question: str = Field(
        ..., description="The core question the study would seek to answer."
    )
    potential_methodology: str = Field(
        ..., description="A brief suggestion of the research approach."
    )
    potential_contribution: str = Field(
        ..., description="The specific gap in knowledge this research could fill."
    )
    rationale: str = Field(
        ...,
        description="A single sentence on why the unique scholarly perspective makes this question compelling.",
    )


class ResearchIdeasList(BaseModel):
    """A list of research ideas."""

    research_ideas: List[ResearchIdea]


class Critique(BaseModel):
    """Represents a critique for a single idea."""

    idea_title: str = Field(..., description="The title of the idea being critiqued.")
    critique: str = Field(..., description="The devil's advocate critique of the idea.")


class CritiqueList(BaseModel):
    """A list of critiques for the brainstormed ideas."""

    critiques: List[Critique]


class TopIdea(BaseModel):
    """Represents a single top idea selected from the brainstorming session."""

    title: str = Field(..., description="The concise title of the idea.")
    description: str = Field(..., description="A detailed description of the idea.")


class TopIdeasList(BaseModel):
    """A list of the top 3 ideas after evaluation."""

    ideas: List[TopIdea]
